#include <stdio.h>
#include <stdlib.h>

#define size 8

void calc(char**, int, int);
void select_board(char**, int, int);
void copy_board(char**, char**, int, int);
int count(char**);
void change(char*);

int main()
{
    int n, m;
    char** board;
    char temp;

    scanf("%d%d", &n, &m);

    //보드 초기화
    board = (char**)malloc(sizeof(char*) * n);
    for(int i = 0; i < n; i++)
    {
        board[i] = (char*)malloc(sizeof(char) * m);
    }
    scanf("%c", &temp);
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            scanf("%c", &board[i][j]);
        }
        scanf("%c", &temp);
    }

/*
    //copy_board test
    char** test_board;
    test_board = (char**)malloc(sizeof(char*) * size);
    for(int i = 0; i < size; i++)
    {
        test_board[i] = (char*)malloc(sizeof(char) * size);
    }
    copy_board(board, test_board, 1, 2);
    for(int i = 0; i < size; i++)
    {
        for(int j = 0; j < size; j++)
        {
            printf("%c", test_board[i][j]);
        }
        printf("\n");
    }
*/ //clear

    select_board(board, n, m);

    //할당 해제
    for(int i = 0; i < n; i++)
    {
        free(board[i]);
    }
    free(board);

    return 0;
}

void calc(char** board, int n, int m)
{


    return;
}

void select_board(char** board, int n, int m)
{
    char** test_board;
    test_board = (char**)malloc(sizeof(char*) * size);
    for(int i = 0; i < size; i++)
    {
        test_board[i] = (char*)malloc(sizeof(char) * size);
    }

    for(int i = 0; i < n - 7; i++)
    {
        for(int j = 0; j < n - 7; j++)
        {
            copy_board(board, test_board, i, j);
            printf("count : %d\n", count(test_board));
        }
    }

    

    //printf("count : %d\n", count(test_board));

    for(int i = 0; i < size; i++)
    {
        free(test_board[i]);
    }
    free(test_board);

    return;
}

void copy_board(char** board, char** test_board, int a, int b)
{
    for(int i = 0; i < size; i++)
    {
        for(int j = 0; j < size; j++)
        {
            test_board[i][j] = board[a + i][b + j];
        }
    }

    return;
}

int count(char** test_board)
{
    int count = 0;
    int count_2 = 0;
    char** temp_board;
    temp_board = (char**)malloc(sizeof(char*) * size);
    for(int i = 0; i < size; i++)
    {
        temp_board[i] = (char*)malloc(sizeof(char) * size);
    }

    for(int i = 0; i < size; i++)
    {
        for(int j = 0; j < size; j++)
        {
            temp_board[i][j] = test_board[i][j];
        }
    }

    //왼쪽위 그대로
    for(int i = 0; i < size; i++)
    {
        for(int j = 0; j < size; j++)
        {
            if(i && !j)
            {
                if(temp_board[i][0] == temp_board[i - 1][0])
                {
                    printf("(%d,%d)\n", i, j);
                    change(&temp_board[i][0]);
                    count++;
                }
            }
            if(j)
            {
                if(temp_board[i][j] == temp_board[i][j - 1])
                {
                    printf("(%d,%d)\n", i, j);
                    change(&temp_board[i][j]);
                    count++;
                }
            }
        }
    }

    //왼쪽위 바꿔서
    change(&temp_board[0][0]);
    for(int i = 0; i < size; i++)
    {
        for(int j = 0; j < size; j++)
        {
            if(i && !j)
            {
                if(temp_board[i][0] == temp_board[i - 1][0])
                {
                    printf("(%d,%d)\n", i, j);
                    change(&temp_board[i][0]);
                    count_2++;
                }
            }
            if(j)
            {
                if(temp_board[i][j] == temp_board[i][j - 1])
                {
                    printf("(%d,%d)\n", i, j);
                    change(&temp_board[i][j]);
                    count_2++;
                }
            }
        }
    }

    //할당 해제
    for(int i = 0; i < size; i++)
    {
        free(test_board[i]);
    }
    free(test_board);

    if(count <= count_2)
    {
        return count;
    }
    else
    {
        return count_2;
    }
}

void change(char* a)
{
    if(*a == 'W')
    {
        *a = 'B';
    }
    else
    {
        *a = 'W';
    }

    return;
}
